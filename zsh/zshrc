# Enhanced Oh-My-Zsh Configuration
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="agnoster"
# ZSH_THEME="powerlevel10k/powerlevel10k"  # Aesthetic and informative theme
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#ff00ff,bg=cyan,bold,underline"
ZSH_AUTOSUGGEST_USE_ASYNC=true
plugins=(
  git
  kubectl
  history
  emoji
  encode64
  zsh-autosuggestions
  zsh-syntax-highlighting
  docker
  npm
  python
  sudo
  web-search
  z
  git-flow
  gitfast
)

# FZF - Fuzzy Finder Integration
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Auto-completion settings
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select

# Powerlevel10k Instant Prompt
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

source $ZSH/oh-my-zsh.sh

# Enhanced Environment Configuration
export PATH=$HOME/bin:/usr/local/bin:$PATH
export EDITOR='nano'   # Switched to Nano for more reasons
# export EDITOR='vim'  # Switched to Vim for more features

# Git Configuration
git config --global user.email "Scott_Howson@CorruptionGames.net"
git config --global user.name "Scott Howson"
git config --global init.defaultBranch main

# General Aliases
alias dl="cd ~/Downloads"
alias dc="cd ~/Documents"
alias gh="cd ~/Documents/GitHub"
alias dt="cd ~/Desktop"
alias ..="cd .."
alias ...="cd ../.."
alias home="cd ~"
alias cp="cp -i"
alias mv="mv -i"
alias rm="rm -i"
alias ls="ls --color=auto"
alias ll="ls -al --color=auto"
alias la="ls -A --color=auto"
alias c="clear"

# Git Aliases
alias gs="git status"
alias ga="git add"
alias gc="git commit -m"
alias gd="git diff"
alias glog="git log --oneline --decorate --graph"
alias gaa="git add --all"
alias gp="git pull"
alias gps="git push"
alias gl="git log"
alias gco="git checkout"
alias gcm="git checkout main"
alias grv="git remote -v"
alias gcl="git clone"

# Docker Aliases
alias d="docker"
alias dc="docker-compose"

# Text Editor Aliases
alias editfile="nano"
alias editconfig="nano ~/.zshrc"

# Directory Shortcuts
alias projects="cd ~/Projects"
alias work="cd ~/Documents/Work"
alias notes="cd ~/Documents/Notes"

# New Aliases for Improved Navigation and Resource Monitoring
alias update="sudo apt update && sudo apt upgrade -y"
alias install="sudo apt install"
alias search="apt-cache search"
alias resource="htop"  # Quick access to system resource monitor

# Make Aliases
alias m='make'
alias mb='make bonus'
alias mc='make clean'
alias mf='make fclean'
alias mr='make re'

# Custom Functions for VS Code
vscfn() {
  if [ -z "$1" ]; then
    echo "Usage: vsc <filename>"
    return 1
  fi

  local filename="$1"
  local file="${filename%%.*}"  # Extract filename without extension
  local extension="${filename#*.}"  # Extract extension, if any

  if [ -z "$extension" ]; then
    extension="txt"  # Default to "txt" if no extension provided
  fi

  touch "$file.$extension"
  code-insiders "$file.$extension"
}

vsc() {
  if [ -z "$1" ]; then
    code-insiders .
  else
    local directory="$1"
    code-insiders "$directory"
  fi
}

# Custom Function to Create and Move to Directory
mkd() {
  if [ -z "$1" ]; then
    echo "Usage: mkd <directory_name>"
    return 1
  fi

  local directory="$1"

  mkdir -p "$directory" && cd "$directory"
}


# Custom Function to Create Directory, Move Into It, Initialize Git,
# Set Branch to "main," Create .gitignore, Prompt for Repo Name,
# Update README Title, and Open in VS Code
gitvs() {
  local debugging_enabled=false  # Initialize debugging flag to false

  if [[ $- == *x* ]]; then
    debugging_enabled=true  # Enable debugging if script is run with '-x'
  fi

  if "$debugging_enabled"; then
    echo -e "\033[93m[INFO] Debugging Enabled.\033[0m"
    set -x  # Enable debugging
  else
    echo -e "\033[93m[INFO] Debugging Disabled.\033[0m"
  fi

  local directory=""
  local repo_name=""

  if [ -z "$1" ]; then
    echo -e "\e[93m[INFO] Usage: gitvs <repo_name> or gitvs <path/to/repo>\e[0m"
    return 1
  elif [[ "$1" == "gh/"* ]]; then
    repo_name="${1#gh/}"
    directory="$HOME/Documents/GitHub/$repo_name"
  elif [[ "$1" != "/"* ]]; then
    directory="$PWD/$1"
  else
    directory="$1"
  fi

  directory=$(realpath -m "$directory")

  if [[ "$directory" == "$HOME" || "$directory" == "/" ]]; then
    echo -e "\e[1;91m[ERROR] Cannot create a repo in the root directory or home directory.\e[0m"
    return
  fi

  local disallowed_dirs=("Downloads" "Pictures" "Music" "Videos" "Desktop" "Documents" "Templates" "Public")
  if [[ " ${disallowed_dirs[@]} " =~ " ${directory##*/} " ]]; then
    echo -e "\e[1;91m[ERROR] Cannot create a repo in $directory.\e[0m"
    return
  fi

  if [ -d "$directory" ]; then
    if [ -d "$directory/.git" ]; then
      echo -e "\e[93m[INFO] Git repo exists. Loading repo.\e[0m"
      code-insiders --new-window "$directory"
      cd "$directory"
    else
      echo -e "\e[1;91m[ERROR] Directory exists but is not a Git repository.\e[0m"
    fi
    return
  fi

  echo -e "\e[93m[PROMPT] Enter a title for your README.md (e.g., 'My Project README'):"
  read -r readme_title

  create_new_git_repository "$directory" "$readme_title"
}

# Custom Function to Initialize Git Repository
create_new_git_repository() {
  mkdir -p "$1"
  cd "$1" || return

  git init
  git config --local init.defaultBranch main

  echo "# $2" >README.md
  echo ".DS_Store" >.gitignore

  git add .
  git commit -m "Initial commit"
  git branch -M main

  echo -e "\e[92m[SUCCESS] Git repo initialized at $1\e[0m"
  code-insiders --new-window "$1"
}

# Autocomplete function
_gitvs_repositories() {
  local cur="${COMP_WORDS[COMP_CWORD]}"
  local suggestions=()

  case "${COMP_WORDS[1]}" in
    "gh/") 
      suggestions=($(find "$HOME/Documents/GitHub/" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; 2>/dev/null))
      ;;
    "/") 
      if [[ "$cur" == /* ]]; then
        suggestions=($(find "${cur}" -mindepth 1 -maxdepth 1 -type d 2>/dev/null))
      else
        suggestions=($(find "/" -mindepth 1 -maxdepth 1 -type d 2>/dev/null))
      fi
      ;;
    *) 
      if [[ "$cur" == /* ]]; then
        suggestions=($(find "${cur}" -mindepth 1 -maxdepth 1 -type d 2>/dev/null))
      else
        suggestions=($(find "$PWD" -mindepth 1 -maxdepth 1 -type d 2>/dev/null))
      fi
      ;;
  esac

  COMPREPLY=($(compgen -W "${suggestions[*]}" -- "$cur"))
}

complete -o filenames -o dirnames -F _gitvs_repositories gitvs


system_monitor(){
    echo "[INFO] SYSTEM TEMPERATURE MONITORING"
    echo "----------------------------------"

    # GPU Temperature (using /sys/kernel/debug/dri/0/amdgpu_pm_info)
    if [ -f "/sys/kernel/debug/dri/0/amdgpu_pm_info" ]; then
        echo -e "\e[1;36mGPU Temperature:\e[0m"
        sudo grep "GPU Temperature" /sys/kernel/debug/dri/0/amdgpu_pm_info | sed 's/\(.*\)/  \1/'
        echo
    fi

    # CPU Temperature (using lm-sensors)
    if [ -x "$(command -v sensors)" ]; then
        echo -e "\e[1;36mCPU Temperature:\e[0m"
        sudo sensors | grep -E 'Core [0-9]+:'
        echo
    fi

    # Motherboard Temperature (using lm-sensors)
    if [ -x "$(command -v sensors)" ]; then
        echo -e "\e[1;36mMotherboard Temperature:\e[0m"
        sudo sensors | grep -i 'MB Temperature'
        echo
    fi

    # RAM Temperature (if supported by hardware)
    # Note: RAM temperature monitoring is not common on consumer systems.
    # You may need to adjust this part based on your hardware and software setup.
    # Example: 'sensors | grep -i memory' or check other available sources.

    # HDD/SSD Temperature (using smartctl)
    # Check the temperature of hard drives and SSDs.
    if [ -x "$(command -v smartctl)" ]; then
        echo -e "\e[1;36mHDD/SSD Temperature:\e[0m"
        sudo smartctl -a /dev/sda | grep "Temperature"
        # Add more devices if needed, e.g., /dev/sdb, /dev/nvme0n1, etc.
        echo
    fi

    # Add more temperature checks for other sensors or devices as needed.
}

alias temps='system_monitor'





initialize_git_repository() {
  echo -e "\e[93m[PROMPT] Enter a title for your README.md (e.g., 'My Project README'):\e[0m"
  read -r readme_title
  git init && git symbolic-ref HEAD refs/heads/main
  echo -e "# Ignore files\n.DS_Store\nnode_modules/\n*.log\n" > .gitignore
  echo "# $readme_title" > README.md
  git add . && git commit -m "Initial commit"
  code-insiders . README.md || echo -e "\e[1;91m[ERROR] code-insiders not found. Open manually.\e[0m"
  echo -e "\e[92m[SUCCESS] Git repo initialized at $1.\e[0m"
}

# System and Networking Tools
alias updategrub="sudo update-grub"
alias reloadzsh="source ~/.zshrc"
alias diskspace="df -h"
alias meminfo="free -m"
alias topprocs="ps aux --sort=-%mem | head -10"
alias myweather="curl wttr.in"
alias listen="lsof -i"
alias flushdns="sudo systemd-resolve --flush-caches"
alias ports="netstat -tulanp"

# Valgrind Shortcuts
alias v='valgrind'
alias vmem='valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-limit=no --tool=memcheck'

# Custom Functions
extract () {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)   tar xjf "$1"     ;;
      *.tar.gz)    tar xzf "$1"     ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar e "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xf "$1"      ;;
      *.tbz2)      tar xjf "$1"     ;;
      *.tgz)       tar xzf "$1"     ;;
      *.zip)       unzip "$1"       ;;
      *.Z)         uncompress "$1"  ;;
      *.7z)        7z x "$1"        ;;
      *.tar.xz)    tar xf "$1"      ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


# Function for Quick Notes
note() {
  local note_dir="$HOME/Notes"
  mkdir -p "$note_dir"
  local note_file="$note_dir/$(date +%Y-%m-%d_%H-%M-%S).md"
  $EDITOR "$note_file"
}

# Shortcut for creating C files and general file touch
tc() {
  touch "$1.c"
}

# Shortcut for creating sh files and general file touch
tsh() {
  touch "$1.sh"
}
